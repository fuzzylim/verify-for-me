generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model VerificationCode {
  id       String                @id @default(uuid())
  code     String
  expiry   DateTime
  attempts VerificationAttempt[]
}

model VerificationAttempt {
  id                 String            @id @default(uuid())
  attemptedCode      String            @map("attempted_code")
  attemptedAt        DateTime          @default(now()) @map("attempted_at")
  emailAddress       String            @map("email_address")
  verificationCodeId String?           @map("verification_code_id")
  verificationCode   VerificationCode? @relation(fields: [verificationCodeId], references: [id])
}

model TrustedDomain {
  // as provided by registry
  id         String    @id @default(uuid())
  domain     String    @unique
  business   Business? @relation(fields: [businessId], references: [id])
  businessId Int?
  // can check the following against business as may be incorrect
  company    String
  abn        String
}

model Business {
  // as provided by australian business register
  id                     Int             @id @default(autoincrement())
  name                   String
  abn                    String
  abnStatus              String
  abnStatusEffectiveFrom DateTime
  category               Category?       @relation(fields: [categoryId], references: [id])
  categoryId             Int?
  claims                 Claim[]
  trustedDomains         TrustedDomain[]
}

model Category {
  id          Int        @id @default(autoincrement())
  name        String
  description String?
  businesses  Business[]
}

model Claim {
  id            Int            @id @default(autoincrement())
  claimType     String // e.g., "Website", "Phone"
  details       String // The actual contact details, e.g., URL, phone number
  business      Business       @relation(fields: [businessId], references: [id])
  businessId    Int
  votes         Int
  verifications Verification[] // Verification records associated with this contact detail
}

model Verification {
  id                   Int                @id @default(autoincrement())
  result               String // The result or status of the verification
  verifiedClaim        Claim              @relation(fields: [verifiedClaimId], references: [id])
  verifiedClaimId      Int
  verificationMethod   VerificationMethod @relation(fields: [verificationMethodId], references: [id])
  verificationMethodId Int
  vefiedAt             DateTime           @default(now())
}

model VerificationMethod {
  id                      Int            @id @default(autoincrement())
  method                  String
  description             String?
  trustworthy_because     String?
  could_be_compromised_by String?
  restaurant_analogy      String?
  verifications           Verification[]
}
